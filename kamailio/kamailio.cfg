#!KAMAILIO
#
# WebSockets proxy configuration
#

# -- !substdef "!FLOW_TIMER!20!g"

#!substdef "!MY_IP_ADDR!0.0.0.0!g"
#!substdef "!MY_DOMAIN!my.domain.ru!g"
#!substdef "!MY_UDP_PORT!5060!g"
#!substdef "!MY_TCP_PORT!5060!g"
#!substdef "!MY_WS_PORT!4444!g"
#!substdef "!MY_WSS_PORT!4443!g"

#!substdef "!MY_WSS_ADDR!tls:MY_IP_ADDR:MY_WSS_PORT!g"
#!substdef "!MY_WS_ADDR!tcp:MY_IP_ADDR:MY_WS_PORT!g"

#!substdef "!MY_UDP_ADDR!udp:MY_IP_ADDR:MY_UDP_PORT!g"
#!substdef "!MY_TCP_ADDR!tcp:MY_IP_ADDR:MY_TCP_PORT!g"

#!define RESPONSE_TIMEOUT 20
#!define REGISTRAR_MIN_EXPIRES 300
#!define REGISTRAR_MAX_EXPIRES 600

#!define DBURL "mysql://kamailio:kamailiorw@localhost/kamailio"
#!define DBURL_DIALOG "redis://127.0.0.1:6379/10"


enable_tls=yes

listen=MY_UDP_ADDR
listen=MY_TCP_ADDR
listen=MY_WSS_ADDR
listen=MY_WS_ADDR


alias=MY_IP_ADDR

####### Global Parameters #########

debug=2
log_stderror=yes
log_facility=LOG_LOCAL0
fork=yes
children=4
alias=""
mpath="/usr/local/kamailio/lib64/kamailio/modules"
tcp_connection_lifetime=30 # FLOW_TIMER + 10
force_rport=yes
tcp_accept_no_cl=yes
tcp_accept_aliases=no

mhomed=1


####### Modules Section ########

loadmodule "tls.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "rr.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "path.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"

loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "stun.so"
loadmodule "sdpops.so"
loadmodule "ipops.so"
loadmodule "avpops.so"
loadmodule "textopsx.so"
loadmodule "ndb_redis.so"
loadmodule "rtpengine.so"
loadmodule "jansson.so"
loadmodule "xhttp.so"
loadmodule "xhttp_rpc.so"
loadmodule "jsonrpcs.so"
loadmodule "websocket.so"
loadmodule "nathelper.so"
loadmodule "htable.so"
loadmodule "db_postgres.so"
loadmodule "db_mysql.so"
loadmodule "db_redis.so"
loadmodule "dialog.so"
loadmodule "debugger.so"
#loadmodule "dispatcher.so"
#loadmodule "app_lua.so"



# ----------------- setting module-specific parameters ---------------

modparam("db_redis", "schema_path", "/usr/local/kamailio/share/kamailio/db_redis/kamailio")
modparam("db_redis", "keys", "dialog=entry:hash_entry,hash_id&cid:callid")
modparam("db_redis", "keys", "dialog_vars=entry:hash_entry,hash_id,dialog_key&dialog:hash_entry,hash_id")

modparam("debugger", "cfgtrace", 1)

# ----- tls params -----
modparam("tls", "config", "/etc/kamailio/tls.cfg")

modparam("jsonrpcs", "transport", 0)
modparam("jsonrpcs", "pretty_format", 1)
modparam("jsonrpcs", "fifo_name", "/var/run/kamailio/kamailio_rpc.fifo")
# ----- mi_fifo params -----
#modparam("mi_fifo", "fifo_name", "/tmp/kamailio_fifo")

# ----- tm params -----
modparam("tm", "failure_reply_mode", 3)
modparam("tm", "reparse_on_dns_failover", 0)

# ----- jsonrpc params -----
modparam("jsonrpcs", "transport", 1)

# ----- rr params -----
modparam("rr", "append_fromtag", 0)
modparam("rr", "enable_double_rr", 1)

# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
/* uncomment the next line to disable parallel forking via location */
# modparam("registrar", "append_branches", 0)
/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 1)
#default expires value
modparam("registrar", "default_expires", 3600)
# max value for expires of registrations
modparam("registrar", "max_expires", 7200)
# set it to 1 to enable GRUU
modparam("registrar", "gruu_enabled", 0)
modparam("registrar", "use_path", 1) 
modparam("registrar", "path_mode", 1) 
modparam("registrar", "path_use_received", 0) 
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")

# ----- db params -----
modparam("ndb_redis", "server", "name=srv1;addr=127.0.0.1;port=6379;db=0")

#-------dialog----
modparam("dialog", "db_url", DBURL_DIALOG)
modparam("dialog", "db_mode", 1)
modparam("dialog", "table_name","dialog")
modparam("dialog", "timeout_avp", "$avp(i:10)")
modparam("dialog", "dlg_flag", 4)
modparam("dialog", "initial_cbs_inscript", 1)
modparam("dialog", "profiles_with_value", "caller")
#modparam("dialog", "default_timeout", 43200)
modparam("dialog", "track_cseq_updates", 1)

####### Dispatcher module  ########

#modparam("dispatcher", "list_file", "/usr/local/etc/kamailio/dispatcher.list")
#modparam("dispatcher", "ds_ping_method", "OPTIONS")
#modparam("dispatcher", "ds_ping_from", "sip:proxy@MY_DOMAIN")
#modparam("dispatcher", "ds_ping_interval", 10)
#modparam("dispatcher", "ds_probing_threshold", 3)
#modparam("dispatcher", "ds_ping_reply_codes", "code=501;code=403;code=404;code=401;code=400;code=200")
#modparam("dispatcher", "ds_probing_mode", 1)


# ----- rtpengine -----
modparam("rtpengine", "read_sdp_pv", "$avp(readSDP)")
modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:22222")

# ----- xhttp params ------

#modparam("xhttp", "url_match", "^/rpc/")

# ----- xhttp_rpc params ------

modparam("xhttp_rpc", "xhttp_rpc_root", "http_rpc")
modparam("websocket", "keepalive_mechanism", 2)

modparam("path", "enable_r2", 1)

#modparam("app_lua","load","/usr/local/etc/kamailio/extended/main.lua")



####### Routing Logic ########

request_route {

	route(REQINIT);

	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	xlog("L_INFO","Received $rm from $si:$sp\n");

	# handle retransmissions
	if (!is_method("ACK")) {
		if(t_precheck_trans()) {
			t_check_trans();
			exit;
		}
		t_check_trans();
	}

	/////////// DETECT_DIRECTION /////////////////////
	route(SET_DIRECTION);

	route(WITHINDLG);

	if (is_method("INVITE|SUBSCRIBE")){
		if ($rU == $null) {
			sl_send_reply("484", "Address Incomplete");
			exit;
		}
	}

	if is_method("REGISTER") {
		add_path();
		append_hf("Supported: path\r\n");
		fix_nated_register();
	}
	remove_hf("Route");

	xlog("L_INFO","$rm from $si : $sp with $ru\n");
	route(PRERELAY);

	route(RELAY);
}

route[PRERELAY] {
	if ($avp(FROM_INTERNAL) == 0 ) { # from WS side
		if (is_method("REGISTER")) {
			route(SAVE_REQUEST_DATA);
		}
		
		xlog("L_INFO","Received $rm from $si:$sp . Resend to $du\n");

		if ($rU == $null) {
			$du = $rz + ":" + $rd + ":" + $rp + ";transport=tcp";
		} else {
			$du = $rz + ":" + $rU + "@" + $rd + ":" + $rp + ";transport=tcp";
		}
		xlog("L_INFO", "START: du forced:$du\n");
		if (is_method("INVITE|SUBSCRIBE")){
			record_route();
			redis_cmd("srv1","GET natLookup:$si:$sp","result");
			append_hf("X-Real-IP: $redis(result=>value)\r\n");
			redis_free("result");
		}
	} else { # from SIP side 
		xlog("L_INFO","Received {$rm} from {$si:$sp} to {$tu}. RURI={$ru}\n");

		$avp(supposedContact) = $ru;
		route(GET_CONTACT_VALUE);
		redis_cmd("srv1","EXISTS contact:$avp(contact)","destinationCheck");
		
		if  ($redis(destinationCheck=>value) == 0) {
			xlog("L_INFO","$avp(contact) not registered\n");
			sl_send_reply("404","Not found");
			redis_free("destinationCheck");
			exit;
		
		} else {
			if (is_method("OPTIONS")) {
				sl_send_reply("200","OK");
				exit;
			}
			
			redis_cmd("srv1","GET contact:$avp(contact)","destination");
			redis_cmd("srv1","GET transport:$avp(contact)","transport");
			if ($redis(transport=>value) == 'wss') {
				$du = "sip:" + $redis(destination=>value) + ";transport=ws";
			} else {
				$du = "sip:" + $redis(destination=>value) + ";transport=" + $redis(transport=>value);
			}
			# sip->wss inbound trnsaction
			xlog("L_INFO","{$rm} will be sent to $du\n");
			#if ($du=~"transport=ws") {
			#	$fs="tls:MY_IP_ADDR:MY_WSS_PORT";
			#}
			
		}

		redis_free("destinationCheck");
		redis_free("destination");
		redis_free("trnasport");

		if (is_method("INVITE|SUBSCRIBE")){
				record_route();
		}
	}
}

route[RELAY] {
	if (is_method("REGISTER|INVITE|SUBSCRIBE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}
	
	if (is_method("INVITE")) {
		dlg_manage();
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");

	}
	
	if (!t_relay()) {
		sl_reply_error();
	}
	
	
	exit;
}


route[REQINIT] {
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(!sanity_check("1511", "7"))
	{
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}

	if ($ua =~ "Linksys/SPA8000"
             || $ua =~ "OpenBTS" 
             || $ua =~ "SIPp" 
             || (af==INET6)
             || $ua =~ "ipcli"
             || $ua =~ "pplsip"
             || $ua =~ "scanner"
        ) {
        	drop();
        	exit;

        }
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (!has_totag()) return;

	# sequential request withing a dialog should
	# take the path determined by record-routing
	if (loose_route()) {
		if ( is_method("NOTIFY") ) {
			# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
			record_route();
		}
		route(PRERELAY);
		route(RELAY);
		exit;
	}

	if ( is_method("ACK") ) {
		if ( t_check_trans() ) {
			# no loose-route, but stateful ACK;
			# must be an ACK after a 487
			# or e.g. 404 from upstream server
			route(PRERELAY);
			route(RELAY);
			exit;
		} else {
			# ACK without matching transaction ... ignore and discard
			exit;
		}
	}
	sl_send_reply("404","Not here");
	exit;
}


route[SET_DIRECTION] {
	if ((proto == WS || proto == WSS)) {
		$avp(FROM_INTERNAL) = 0;
		$avp(source) = $si + ":" + $sp;
		return;	
	}
#	if ds_is_from_list(1) {
#		$avp(FROM_INTERNAL) = 1;
#		$avp(mediaAddr) = "MY_ADVERTISED_IP_ADDR";
#		return;
#	}


#	if !ds_select_dst(1,8) {
#		send_reply(404, "Not found");
#		exit;
#	}
	
	$avp(source) = $si + ":" + $sp;
	$avp(FROM_INTERNAL) = 1;
	$avp(mediaAddr) = "MY_IP_ADDR";

}

route[HANDLE_EXPIRES] {

	if(@contact.expires) {
        $avp(expires) = @contact.expires;
    } else {
        if(is_present_hf("Expires")) {
           $avp(expires) = $hdr(Expires);
        } else {
           $avp(expires) = REGISTRAR_MIN_EXPIRES;
        }
    }

    // check if expires with allowed length
    if($avp(expires) < REGISTRAR_MIN_EXPIRES) {
      $avp(expires) = REGISTRAR_MIN_EXPIRES;
   } else if($avp(expires) > REGISTRAR_MAX_EXPIRES) {
      $avp(expires) = REGISTRAR_MAX_EXPIRES;
   }
}

route[GET_CONTACT_VALUE] {
	if $avp(contact) != "" {
		xlog("L_INFO","Contact for transaction already set\n");
		return;
	}
	if $avp(supposedContact) =~ "<" {
		$avp(contact) = $(avp(supposedContact){s.select,1,<});
		xlog("L_INFO","{$rm} !!!!Setting contact $ct ($avp(contact))\n");
		$avp(contact) = $(avp(contact){s.select,0,>});
		xlog("L_INFO","{$rm} !!!!Setting contact $ct ($avp(contact))\n");
	} else {
		$avp(contact) = $avp(supposedContact);
		xlog("L_INFO","{$rm} !!!!Setting contact $ct ($avp(contact))\n");
	}
	$avp(contact) = $(avp(contact){s.select,0,;});
	xlog("L_INFO","{$rm} !!!!Setting contact $ct ($avp(contact))\n");
	//if ($avp(FROM_INTERNAL) == 0 ) {
		$avp(contact) = $(avp(contact){s.select,0,@}) + "@" + $Ri + ":5060";
		xlog("L_INFO","{$rm} !!!!Setting contact $ct ($avp(contact))\n");
	//}

	xlog("L_INFO","Contact found $avp(contact)\n");

}

route[SAVE_REQUEST_DATA] {
	
	if $ct != "" && $ct != $null {
		$avp(rspTmt) = RESPONSE_TIMEOUT;
		
		$avp(supposedContact) = $ct;
		route(GET_CONTACT_VALUE);
		xlog("L_INFO","{$rm} Mapping contact $ct ($avp(contact)) with source $si:$sp . Will expire at $avp(rspTmt)\n");
		redis_cmd("srv1","SET contact:$avp(contact) $si:$sp","result");
		redis_cmd("srv1","SET method:$avp(contact) $rm","result");
		redis_cmd("srv1","SET callid:$avp(contact) $ci","result");
		redis_cmd("srv1","SET contactLookup:$si:$sp $avp(contact)","result");
		redis_cmd("srv1","SET transport:$avp(contact) $pr","result");

		redis_cmd("srv1","EXPIRE contact:$avp(contact) $avp(rspTmt)","result");
		redis_cmd("srv1","EXPIRE method:$avp(contact) $avp(rspTmt)","result");
		redis_cmd("srv1","EXPIRE callid:$avp(contact) $avp(rspTmt)","result");
		redis_cmd("srv1","EXPIRE contactLookup:$si:$sp $avp(rspTmt)","result"); 
		redis_cmd("srv1","EXPIRE natLookup:$si:$sp $avp(rspTmt)","result"); 
		redis_cmd("srv1","EXPIRE transport:$avp(contact) $avp(rspTmt)","result"); 
		redis_free("result");
	}

}

route[UPDATE_REQUEST_DATA] {
	
	xlog("L_INFO","{$rm}:{$rs} Saving at the cache\n");
	$avp(expires) = 0;
	route(HANDLE_EXPIRES);
	
	xlog("L_INFO","{$rm}:{$rs} update data for $ct . Set it valid  $avp(expires) secs\n");
	xlog("L_INFO","{$rm}:{$rs} Original avp contact: $avp(contact)\n");

	if ($avp(expires) != 0) {
		if $ct != "" && $ct != $null {
			$avp(supposedContact) = $ct;
			//route(GET_CONTACT_VALUE);
			redis_cmd("srv1","GET contact:$avp(contact)","contactSource");
			redis_cmd("srv1","EXPIRE contact:$avp(contact) $avp(expires)","result");
			redis_cmd("srv1","EXPIRE method:$avp(contact) $avp(expires)","result");
			redis_cmd("srv1","EXPIRE callid:$avp(contact) $avp(expires)","result");
			redis_cmd("srv1","EXPIRE contactLookup:$redis(contactSource=>value) $avp(expires)","result");
			redis_cmd("srv1","EXPIRE transport:$avp(contact) $avp(expires)","result");
			redis_cmd("srv1","EXPIRE natLookup:$si:$sp $avp(rspTmt)","result"); 
			redis_free("contactSource");
			redis_free("result");
		}
	}
}

route[GET_REAL_IP_FOR_RTPENGINE] {
	redis_cmd("srv1","GET natLookup:$si:$sp","result");
	$avp(RealIP) = $redis(result=>value);
	redis_free("result");
	if $avp(RealIP) != "" {
		xlog("L_INFO","{$rm} got real ip: $avp(RealIP)\n");
		$avp(RealIP) = $RAi;
		$avp(readSDP) = $rb;
		return;
	}

	$avp(readSDP) = $rb;
}

onreply_route[STANDART] {
	xlog("L_INFO","on_reply:STANDARD enter\n");
	if (!t_check_trans()) {
		drop;
	}
	
	remove_hf("Session-Expires");

	if ($rm == "REGISTER" && $rs >= 200 && $rs <= 299) {
		route(UPDATE_REQUEST_DATA);
	}

	route(SET_DIRECTION);

	if ($rm == "INVITE" && $rs >= 200 && $rs <= 299){
		xlog("L_INFO"," UDP response method $rm, respose $rs . Source is $si:$sp . Destination is $du\n");
	}

	$avp(mediaAddr) = '';
	if (has_body('application/sdp')) {
		route(GET_REAL_IP_FOR_RTPENGINE);
		rtpengine_manage("record-call=off metadata=1:$ci trust-address replace-origin replace-session-connection media-address=$avp(mediaAddr)");
	}
	
	if ($rs =~ "[3456][0-9][0-9]") {
		rtpengine_manage();
	}
	xlog("L_INFO","on_reply:STANDARD leave\n");
}

onreply_route[REPLY_TO_WS] {

	route(SET_DIRECTION);

	remove_hf("Session-Expires");
	
	if ($rm == "REGISTER" /*&& $rs >= 200 && $rs <= 299*/) {
		route(UPDATE_REQUEST_DATA);
	}
	
	if ($rm == "INVITE" && $rs >= 200 && $rs <= 299){
		
		xlog("L_INFO"," method $rm, respose $rs . Source is $si:$sp . Destination is $du\n");
		
	}

	if (has_body('application/sdp'))  {
		route(GET_REAL_IP_FOR_RTPENGINE);
		$avp(readSDP) = $avp(readSDP)+"a=rtcp-mux\r\n";
		rtpengine_manage("record-call=off metadata=2:$ci:$avp(mediaAddr) replace-origin replace-session-connection rtcp-mux-accept rtcp-mux-offer DTLS=passive SDES-off UDP/TLS/RTP/SAVPF media-address=$avp(mediaAddr) ");
	}

	if ($rs =~ "[3456][0-9][0-9]") {
		rtpengine_manage();
	}
}


onreply_route[REPLY_TO_TLS] {


	remove_hf("Session-Expires");

	//sdp_remove_media("video");
	
	if ($rm == "INVITE" && $rs >= 200 && $rs <= 299){
		
		xlog("L_INFO"," method $rm, respose $rs . Source is $si:$sp . Destination id $sel(via[2].received):$sel(via[2].rport)\n");
		
	}
	
	if ($rm == "REGISTER" && $rs >= 200 && $rs <= 299) {
		route(UPDATE_REQUEST_DATA);
	}

	if (has_body('application/sdp')) {

		route(GET_REAL_IP_FOR_RTPENGINE);
		rtpengine_manage("record-call=off metadata=3:$ci force replace-origin replace-session-connection RTP/SAVP media-address=$avp(mediaAddr)");
	}
}


onreply_route[REPLY_FROM_WS] {
	
	remove_hf("Session-Expires");

	if ($rm == "INVITE" && $rs >= 200 && $rs <= 299){
	
		xlog("L_INFO"," method $rm, respose $rs . Source is $si:$sp . Destination id $sel(via[2].received):$sel(via[2].rport)\n");
		
	}

	route(SET_DIRECTION);
	

	if (has_body('application/sdp')) {
		route(GET_REAL_IP_FOR_RTPENGINE);
		rtpengine_manage("record-call=off metadata=4:$ci force replace-origin replace-session-connection DTLS=passive ICE=remove RTP/AVP media-address=$avp(mediaAddr)");
	}
	if ($rs =~ "[3456][0-9][0-9]") {
		rtpengine_manage();
	}
}


onreply_route[REPLY_FROM_TLS] {

	
	remove_hf("Session-Expires");

	

	if ($rm == "INVITE" && $rs >= 200 && $rs <= 299){
	
		xlog("L_INFO"," method $rm, respose $rs . Source is $si:$sp . Destination id $sel(via[2].received):$sel(via[2].rport)\n");
		
	}
	
	if (has_body('application/sdp')) {
		route(GET_REAL_IP_FOR_RTPENGINE);
		rtpengine_manage("record-call=off metadata=5:$ci force replace-origin replace-session-connection DTLS=passive ICE=remove RTP/AVP media-address=$avp(mediaAddr)");
	}
	if ($rs =~ "[3456][0-9][0-9]") {
		rtpengine_manage();
	}
	
}


branch_route[MANAGE_BRANCH]{
	xlog("L_INFO","Call to ru:{$ru} '$du'/'$proto'\n");
	if(($du=~"transport=ws") || ($du=~"transport=wss")){
		if ($du=~"transport=tls") {
			//sdp_remove_media("video");
			xlog("L_INFO","Call to TLS endpoint at the DURI {$du} for callee {$tU}\n");
			if (has_body('application/sdp')) {
				rtpengine_manage("record-call=off metadata=6:$ci force trust-address replace-origin replace-session-connection UDP/TLS/RTP/SAVPF");
			}
			t_on_reply("REPLY_FROM_TLS");
			//$fs="tls:MY_IP_ADDR:MY_WSS_PORT";
		} else if ($du=~"transport=ws") {
			xlog("L_INFO","Call to Websocket endpoint at the DURI {$du} for callee {$tU}\n");
			if (has_body('application/sdp'))  {
				route(GET_REAL_IP_FOR_RTPENGINE);
				rtpengine_manage("record-call=off metadata=7:$ci replace-origin replace-session-connection rtcp-mux-accept rtcp-mux-offer DTLS=passive SDES-off UDP/TLS/RTP/SAVPF media-address=$avp(mediaAddr)");
			}
			t_on_reply("REPLY_FROM_WS");	
			$du = $du + ";transport=ws";
			$fs="tcp:MY_IP_ADDR:MY_WS_PORT";
		}
	}
	else {
		if ($proto=~ "tls")
		{
			//sdp_remove_media("video");
			xlog("L_INFO","Call from WSS endpoint at the DURI {$du} for callee {$tU}\n");
			if (has_body('application/sdp')) {
				rtpengine_manage("record-call=off metadata=8:$ci trust-address replace-origin replace-session-connection DTLS=passive ICE=remove RTP/AVP");
			}
			xlog("L_INFO","media adress is $(du{s.select,1,:})\n");
			t_on_reply("REPLY_TO_TLS");
		} else if ($proto =~ "ws"){
			xlog("L_INFO","Call from Websocket endpoint at the DURI {$du} for callee {$tU}\n");
			
			if (has_body('application/sdp')) {
				route(GET_REAL_IP_FOR_RTPENGINE);
				rtpengine_manage("record-call=off metadata=9:$ci replace-origin replace-session-connection DTLS=passive ICE=remove RTP/AVP media-address=$avp(mediaAddr)");
			}

			xlog("L_INFO","media adress is $(du{s.select,1,:})\n");
			t_on_reply("REPLY_TO_WS");
		}

		if (($proto=~ "udp") || ($proto=~"tcp"))
		{
			//sdp_remove_media("video");

			xlog("L_INFO","UDP Branch is {$du} for {$tU}\n");
			$avp(mediaAddr) = '';
			if ( has_body('application/sdp')) {
				rtpengine_manage("record-call=off metadata=10:$ci replace-origin replace-session-connection media-address=$avp(mediaAddr)");
			}
			t_on_reply("STANDART");
		}
	}

	xlog("L_INFO", "t_on_reply set\n");

	if is_method("BYE|CANCEL") {
		rtpengine_manage();
	}
}

failure_route[FLOW_FAILED] {
	if (t_branch_timeout() || !t_branch_replied()) {
		send_reply("430", "Flow Failed");
	}

}

event_route[xhttp:request] {
	set_reply_close();
	set_reply_no_connect();

	$avp(xhttp_rpc_root) = $(hu{s.substr,0,9});
	if ($avp(xhttp_rpc_root) == "/http_rpc"){
		dispatch_xhttp_rpc();
		exit;
	}
	if (($hu =~ "^/rpc") && ($rb != "")) {
		xlog("L_NOTICE", "[XHTTP:REQUEST] $si ACCEPTED ***\n");
		jansson_get("method", "$rb", "$var(rpcMethod)");
		xlog("L_NOTICE", "[XHTTP:REQUEST] RPC METHOD: $var(rpcMethod) ***\n");
		jsonrpc_dispatch();
		exit;
	}

	xlog("L_INFO", "HTTP request received from $si:$sp\n");
	if ( $Rp != MY_WSS_PORT) {
                xlog("L_WARN", "HTTP request received on $Rp\n");
                exit;
    }

    if ($hdr(Upgrade)=~"websocket" && $hdr(Connection)=~"Upgrade" && $rm=~"GET") {

        # Validate Host - make sure the client is using the correct
        # alias for WebSockets
        if ($hdr(Host) == $null || !is_myself("sip:" + $hdr(Host))) {
            xlog("L_WARN", "Bad host $hdr(Host)\n");
            xhttp_reply("403", "Forbidden", "", "");
            exit;
        }

		$avp(RealIP) = $RAi;

        if ($avp(RealIP) == ""){
        	xhttp_reply("498","Can't get real address ($RAi)","","");
        	exit;
        }

        if (ws_handle_handshake()){
            # Optional... cache some information about the
            # successful connection
            xlog("L_INFO","X-Real-IP header found: $avp(RealIP)\n");
            redis_cmd("srv1","SET natLookup:$si:$sp $avp(RealIP)","result");
            redis_cmd("srv1","EXPIRE natLookup:$si:$sp 60","result"); //60 seconds like a n default exire for initiated HTTP based requests
        	redis_free("result");

            exit;
        }
    }

    xhttp_reply("404", "Not Found", "", "");
}


event_route[websocket:closed] {
	xlog("L_INFO", "WebSocket connection from $si:$sp has closed\n");
	redis_cmd("srv1","GET contactLookup:$si:$sp","contactLookup");
	redis_cmd("srv1","DEL contactLookup:$si:$sp","result");
	redis_cmd("srv1","DEL natLookup:$si:$sp","result");
	redis_cmd("srv1","DEL contact:$redis(contactLookup=>value)","result");
	redis_cmd("srv1","DEL transport:$redis(contactLookup=>value)","result");
	redis_free("result");
	redis_free("contactLookup");
}

event_route[htable:mod-init] {
	redis_cmd("srv1","FLUSHALL","result");
	redis_free("result");
	xlog("L_INFO", "*** Kamailio starting!\n");
}
